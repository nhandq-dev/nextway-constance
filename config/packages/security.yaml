security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        user_provider:
            entity:
                class: App\Entity\User
                property: email
    # providers:
    #     admin_user_provider:
    #         entity:
    #             class: App\Entity\User
    #             property: email
    #     api_user_provider:
    #         entity:
    #             class: App\Entity\User
    #             property: id
    #     all_users:
    #         chain:
    #             providers: ['admin_user_provider', 'api_user_provider']
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_token:
            pattern: ^/api/token$
            security: false
        api:
            provider: user_provider
            pattern: ^/api
            security: true
            stateless: true
            oauth2: true
            # login_throttling:
            #     max_attempts: 3          # per minute ...
            # user_checker: App\Security\UserChecker

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        admin:
            lazy: true
            provider: user_provider
            pattern: ^/
            form_login:
                login_path: path_admin_login
                check_path: path_admin_login
                default_target_path: admin
                enable_csrf: true
            logout:
                path: security_logout
                target: path_admin_login
                enable_csrf: true
            login_link:
                check_route: login_check
                signature_properties: ['id']
                lifetime: 600
                max_uses: 1
                success_handler: App\Security\Authentication\AuthenticationSuccessHandler

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/authorize, roles: IS_AUTHENTICATED_REMEMBERED }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/api, roles: ROLE_USER }
        # - { path: ^/api, roles: IS_AUTHENTICATED_REMEMBERED }
        # - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
